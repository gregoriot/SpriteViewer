/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package spriteviewer;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;
import javax.swing.JFileChooser;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author gustavo
 */
public class Window extends javax.swing.JFrame implements Runnable{

    private Thread thread;
    
    private int fps = 0;
    private int sfps = 0;
    
    /**
     * Creates new form Window
     */
    public Window() {
        initComponents();
        
        setLocationRelativeTo(null);
        thread = new Thread(this);
        thread.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelChangeImage = new javax.swing.JLabel();
        buttonChangeImage = new javax.swing.JButton();
        separatorChangeImage = new javax.swing.JSeparator();
        labelQtdAnimation = new javax.swing.JLabel();
        spinnerQtdAnimation = new javax.swing.JSpinner();
        labelQtdFrame = new javax.swing.JLabel();
        spinnerQtdFrame = new javax.swing.JSpinner();
        separatorQtd = new javax.swing.JSeparator();
        labelFramesPerSecond = new javax.swing.JLabel();
        spinnerSpinnerFramesPerSecond = new javax.swing.JSpinner();
        sliderFramesPerSecond = new javax.swing.JSlider();
        labelPreview = new javax.swing.JLabel();
        labelCurrentAnimation = new javax.swing.JLabel();
        spinnerCurrentAnimation = new javax.swing.JSpinner();
        separatorPreview = new javax.swing.JSeparator();
        labelZoom = new javax.swing.JLabel();
        spinnerSpinnerZoom = new javax.swing.JSpinner();
        sliderZoom = new javax.swing.JSlider();
        separatorQtd1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelPreview = new spriteviewer.PanelPreview();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SpriteViewer");
        addWindowStateListener(new java.awt.event.WindowStateListener() {
            public void windowStateChanged(java.awt.event.WindowEvent evt) {
                formWindowStateChanged(evt);
            }
        });

        labelChangeImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelChangeImage.setText("Choice the image's animation");

        buttonChangeImage.setText("Choice / Change");
        buttonChangeImage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonChangeImageActionPerformed(evt);
            }
        });

        labelQtdAnimation.setText("Qtd animation");

        spinnerQtdAnimation.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerQtdAnimation.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                spinnerCurrentAnimation.setModel(new javax.swing.SpinnerNumberModel((int)spinnerCurrentAnimation.getValue(), 1, (int)spinnerQtdAnimation.getValue(), 1));
                panelPreview.setQtdAnimation((int)spinnerQtdAnimation.getValue());
                panelPreview.prepareFrame();
            }
        });

        labelQtdFrame.setText("Qtd frame");

        spinnerQtdFrame.setModel(new javax.swing.SpinnerNumberModel(Integer.valueOf(1), Integer.valueOf(1), null, Integer.valueOf(1)));
        spinnerQtdFrame.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                panelPreview.setQtdFrame((int)spinnerQtdFrame.getValue());
                panelPreview.setSpeedFrame(sliderFramesPerSecond.getValue());
                panelPreview.prepareFrame();
            }
        });

        labelFramesPerSecond.setText("Frames per second");

        spinnerSpinnerFramesPerSecond.setModel(new javax.swing.SpinnerNumberModel(30, 0, 60, 1));
        spinnerSpinnerFramesPerSecond.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                sliderFramesPerSecond.setValue((int)spinnerSpinnerFramesPerSecond.getValue());
            }
        });

        sliderFramesPerSecond.setMajorTickSpacing(20);
        sliderFramesPerSecond.setMaximum(60);
        sliderFramesPerSecond.setMinorTickSpacing(5);
        sliderFramesPerSecond.setPaintLabels(true);
        sliderFramesPerSecond.setPaintTicks(true);
        sliderFramesPerSecond.setValue(30);
        sliderFramesPerSecond.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderFramesPerSecondStateChanged(evt);
            }
        });
        panelPreview.setSpeedFrame(sliderFramesPerSecond.getValue());

        labelPreview.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelPreview.setText("Preview");

        labelCurrentAnimation.setText("Current animation");

        spinnerCurrentAnimation.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1, 1));
        spinnerCurrentAnimation.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                panelPreview.setCurrentAnimation((int)spinnerCurrentAnimation.getValue());
                panelPreview.repaint();
            }
        });

        labelZoom.setText("Zoom (%)");

        spinnerSpinnerZoom.setModel(new javax.swing.SpinnerNumberModel(100, 100, 500, 25));
        spinnerSpinnerZoom.addChangeListener(new ChangeListener(){
            @Override
            public void stateChanged(ChangeEvent e) {
                sliderZoom.setValue((int)spinnerSpinnerZoom.getValue());
            }
        });

        sliderZoom.setMajorTickSpacing(100);
        sliderZoom.setMaximum(500);
        sliderZoom.setMinimum(100);
        sliderZoom.setMinorTickSpacing(25);
        sliderZoom.setPaintLabels(true);
        sliderZoom.setPaintTicks(true);
        sliderZoom.setSnapToTicks(true);
        sliderZoom.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderZoomStateChanged(evt);
            }
        });
        panelPreview.setZoom(sliderZoom.getValue());

        panelPreview.setPreferredSize(new java.awt.Dimension(1, 1));

        javax.swing.GroupLayout panelPreviewLayout = new javax.swing.GroupLayout(panelPreview);
        panelPreview.setLayout(panelPreviewLayout);
        panelPreviewLayout.setHorizontalGroup(
            panelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 270, Short.MAX_VALUE)
        );
        panelPreviewLayout.setVerticalGroup(
            panelPreviewLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 303, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(panelPreview);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(sliderFramesPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(separatorQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelChangeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonChangeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(separatorChangeImage, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(labelQtdAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spinnerQtdAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                            .addComponent(labelQtdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(spinnerQtdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelFramesPerSecond, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerSpinnerFramesPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(sliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelZoom, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerSpinnerZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(separatorQtd1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelCurrentAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(spinnerCurrentAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(separatorPreview)
                    .addComponent(labelPreview, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelChangeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(buttonChangeImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorChangeImage, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelQtdAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerQtdAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(spinnerQtdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labelQtdFrame, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorQtd, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelFramesPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerSpinnerFramesPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderFramesPerSecond, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(separatorQtd1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelZoom, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerSpinnerZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(sliderZoom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labelCurrentAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(spinnerCurrentAnimation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(separatorPreview, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonChangeImageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonChangeImageActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Image files (*.png, *.jpeg, *.png)", "jpg", "jpeg", "png");
        fileChooser.setFileFilter(filter);
        
        int returnValue = fileChooser.showOpenDialog(this);
        if (returnValue == JFileChooser.APPROVE_OPTION){
            File file = fileChooser.getSelectedFile();
            try{
                BufferedImage image = ImageIO.read(file);
                panelPreview.setImage(image);
                panelPreview.prepareFrame();
            }catch(IOException ex){}
        }
    }//GEN-LAST:event_buttonChangeImageActionPerformed

    private void sliderFramesPerSecondStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderFramesPerSecondStateChanged
        JSlider slider = (JSlider)evt.getSource();
        spinnerSpinnerFramesPerSecond.setValue(slider.getValue());
        panelPreview.setSpeedFrame(slider.getValue());
    }//GEN-LAST:event_sliderFramesPerSecondStateChanged

    private void sliderZoomStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderZoomStateChanged
        JSlider slider = (JSlider)evt.getSource();
        spinnerSpinnerZoom.setValue(slider.getValue());
        panelPreview.setZoom(slider.getValue());
        panelPreview.prepareFrame();
    }//GEN-LAST:event_sliderZoomStateChanged

    private void formWindowStateChanged(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowStateChanged
        revalidate();
        panelPreview.prepareFrame();
    }//GEN-LAST:event_formWindowStateChanged

    @Override
    public void run() {
        int seconds = 0;
        long difTime = 0;
        long lastTime = System.currentTimeMillis();
        
        while (true) {
            panelPreview.update((int)difTime);
            panelPreview.repaint();
            
            difTime = System.currentTimeMillis() - lastTime;
            lastTime = System.currentTimeMillis();
            
            /*Is a new second.*/
            if(seconds!=((int)(lastTime/1000))){
                fps = sfps;
                sfps = 1;
                seconds = ((int)(lastTime/1000));
            }else{
                sfps++;
                try {
                    thread.sleep(10);
                } catch (InterruptedException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Window.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Window().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonChangeImage;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelChangeImage;
    private javax.swing.JLabel labelCurrentAnimation;
    private javax.swing.JLabel labelFramesPerSecond;
    private javax.swing.JLabel labelPreview;
    private javax.swing.JLabel labelQtdAnimation;
    private javax.swing.JLabel labelQtdFrame;
    private javax.swing.JLabel labelZoom;
    private spriteviewer.PanelPreview panelPreview;
    private javax.swing.JSeparator separatorChangeImage;
    private javax.swing.JSeparator separatorPreview;
    private javax.swing.JSeparator separatorQtd;
    private javax.swing.JSeparator separatorQtd1;
    private javax.swing.JSlider sliderFramesPerSecond;
    private javax.swing.JSlider sliderZoom;
    private javax.swing.JSpinner spinnerCurrentAnimation;
    private javax.swing.JSpinner spinnerQtdAnimation;
    private javax.swing.JSpinner spinnerQtdFrame;
    private javax.swing.JSpinner spinnerSpinnerFramesPerSecond;
    private javax.swing.JSpinner spinnerSpinnerZoom;
    // End of variables declaration//GEN-END:variables

}
